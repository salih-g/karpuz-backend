generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  username     String        @unique
  password     String
  role         Role          @default(USER)
  comments     Comment[]
  posts        Post[]
  postLikes    PostLike[]
  commentLikes CommentLike[]
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.ObjectId
  comments  Comment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt()
  postLikes PostLike[]
}

model Comment {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  body         String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String        @db.ObjectId
  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String        @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
  commentLikes CommentLike[]
}

model PostLike {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model CommentLike {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @db.ObjectId
}

enum Role {
  USER
  ADMIN
}
